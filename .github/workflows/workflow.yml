name: Build
on:
  # Ensure GitHub actions are not run twice for same commits
  push:
    branches: [main]
    tags: ['*']
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Linting
        run: npm run format:ci
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ['14.18.0', '*']
        # Must include the minimum deno version from the `DENO_VERSION_RANGE` constant in `node/bridge.ts`.
        deno-version: ['v1.37.0', 'v1.x']
        include:
          - os: macOS-latest
            node-version: '*'
            deno-version: 'v1.x'
          - os: windows-latest
            node-version: '*'
            deno-version: 'v1.x'
      fail-fast: false
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno-version }}
      - name: Setup Deno dependencies
        run: deno cache https://deno.land/x/eszip@v0.55.2/eszip.ts
      - name: Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          check-latest: true
      - name: Install dependencies
        run: npm ci
      - name: Tests
        run: npm run test:ci
      - name: Get test coverage flags
        id: test-coverage-flags
        run: |-
          os=${{ matrix.os }}
          node=$(node --version)
          echo "os=${os/-latest/}" >> $GITHUB_OUTPUT
          echo "node=node_${node//[.*]/}" >> $GITHUB_OUTPUT
        shell: bash
      - uses: codecov/codecov-action@v3
        with:
          file: coverage/coverage-final.json
          flags: ${{ steps.test-coverage-flags.outputs.os }},${{ steps.test-coverage-flags.outputs.node }}
